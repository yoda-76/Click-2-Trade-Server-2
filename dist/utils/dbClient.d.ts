import { ChildAccount, MasterAccount, User } from '@prisma/client';
declare class DBClient {
    getUserByEmail(email: string): Promise<{
        id: string;
        name: string;
        email: string;
        password: string;
        total_pnl: number;
        ph_number: string;
        ph_number_verified: boolean;
        photo: string;
        verified: boolean;
        subscriptionExpiry: Date;
        role: import(".prisma/client").$Enums.Role;
    }>;
    createUser(data: {
        name: string;
        email: string;
        password: string;
        ph_number: string;
        role: "USER" | "ADMIN";
    }): Promise<{
        id: string;
        name: string;
        email: string;
        password: string;
        total_pnl: number;
        ph_number: string;
        ph_number_verified: boolean;
        photo: string;
        verified: boolean;
        subscriptionExpiry: Date;
        role: import(".prisma/client").$Enums.Role;
    }>;
    getUserById(id: string): Promise<{
        id: string;
        name: string;
        email: string;
        password: string;
        total_pnl: number;
        ph_number: string;
        ph_number_verified: boolean;
        photo: string;
        verified: boolean;
        subscriptionExpiry: Date;
        role: import(".prisma/client").$Enums.Role;
    }>;
    createUserPrefrences(id: string): Promise<{
        id: string;
        user_id: string;
        stoploss: number;
        target: number;
        sl_increment: number;
        target_increment: number;
        trailing_point: number;
        mtm_stoploss: number;
        mtm_target: number;
        mtm_sl_increment: number;
        mtm_target_increment: number;
        mtm_trailing_point: number;
    }>;
    updateUserPrefrencesById(id: string, data: User): Promise<{
        id: string;
        user_id: string;
        stoploss: number;
        target: number;
        sl_increment: number;
        target_increment: number;
        trailing_point: number;
        mtm_stoploss: number;
        mtm_target: number;
        mtm_sl_increment: number;
        mtm_target_increment: number;
        mtm_trailing_point: number;
    }>;
    getUserPrefrencesById(id: string): Promise<{
        id: string;
        user_id: string;
        stoploss: number;
        target: number;
        sl_increment: number;
        target_increment: number;
        trailing_point: number;
        mtm_stoploss: number;
        mtm_target: number;
        mtm_sl_increment: number;
        mtm_target_increment: number;
        mtm_trailing_point: number;
    }>;
    createMasterAccount(user_id: string, key: string, secret: string, broker: "UPSTOCKS" | "DHAN" | "ANGEL" | "ESPRESSO", broker_id: string, u_id: string): Promise<{
        id: string;
        user_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        pnl: number;
        added_at: Date;
        modified_at: Date;
    }>;
    deleteMasterAccount(id: string): Promise<{
        id: string;
        user_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        pnl: number;
        added_at: Date;
        modified_at: Date;
    }>;
    updateMasterAccountByUid(u_id: string, data: MasterAccount): Promise<{
        id: string;
        user_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        pnl: number;
        added_at: Date;
        modified_at: Date;
    }>;
    updateMasterAccessTokenByUid(u_id: string, data: {
        access_token: string;
        last_token_generated_at: Date;
    }): Promise<{
        id: string;
        user_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        pnl: number;
        added_at: Date;
        modified_at: Date;
    }>;
    updateMasterAccountById(id: string, data: MasterAccount): Promise<{
        id: string;
        user_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        pnl: number;
        added_at: Date;
        modified_at: Date;
    }>;
    getMasterAccountByUid(u_id: string): Promise<{
        id: string;
        user_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        pnl: number;
        added_at: Date;
        modified_at: Date;
    }>;
    getMasterAccountById(id: string): Promise<{
        id: string;
        user_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        pnl: number;
        added_at: Date;
        modified_at: Date;
    }>;
    getMasterAccounts(): Promise<{
        id: string;
        user_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        pnl: number;
        added_at: Date;
        modified_at: Date;
    }[]>;
    getMasterAccountsByUserId(user_id: string): Promise<{
        id: string;
        user_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        pnl: number;
        added_at: Date;
        modified_at: Date;
    }[]>;
    createChildAccount(email: string, key: string, secret: string, broker: "UPSTOCKS" | "DHAN" | "ANGEL" | "ESPRESSO", broker_id: string, master: string, u_id: string): Promise<{
        id: string;
        master_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        multiplier: number;
        active: boolean;
        added_at: Date;
        modified_at: Date;
        pnl: number;
    }>;
    deleteChildAccount(id: string): Promise<{
        id: string;
        master_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        multiplier: number;
        active: boolean;
        added_at: Date;
        modified_at: Date;
        pnl: number;
    }>;
    updateChildAccountByUid(u_id: string, data: ChildAccount): Promise<{
        id: string;
        master_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        multiplier: number;
        active: boolean;
        added_at: Date;
        modified_at: Date;
        pnl: number;
    }>;
    updateChildAccountById(id: string, data: any): Promise<{
        id: string;
        master_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        multiplier: number;
        active: boolean;
        added_at: Date;
        modified_at: Date;
        pnl: number;
    }>;
    updateChildAccessTokenByUid(u_id: string, data: {
        access_token: string;
        last_token_generated_at: Date;
    }): Promise<{
        id: string;
        master_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        multiplier: number;
        active: boolean;
        added_at: Date;
        modified_at: Date;
        pnl: number;
    }>;
    getChildAccountByUid(u_id: string): Promise<{
        id: string;
        master_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        multiplier: number;
        active: boolean;
        added_at: Date;
        modified_at: Date;
        pnl: number;
    }>;
    getChildAccountById(id: string): Promise<{
        id: string;
        master_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        multiplier: number;
        active: boolean;
        added_at: Date;
        modified_at: Date;
        pnl: number;
    }>;
    getChildAccountsByMasterId(master_id: string): Promise<{
        id: string;
        master_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        multiplier: number;
        active: boolean;
        added_at: Date;
        modified_at: Date;
        pnl: number;
    }[]>;
    getChildAccounts(): Promise<{
        id: string;
        master_id: string;
        u_id: string;
        broker: import(".prisma/client").$Enums.Broker;
        broker_id: string;
        key: string;
        secret: string;
        access_token: string;
        last_token_generated_at: Date;
        multiplier: number;
        active: boolean;
        added_at: Date;
        modified_at: Date;
        pnl: number;
    }[]>;
    persistOrderbook(accountId: string, orderId: string, orderDetails: any, childOrders: any): Promise<void>;
}
export declare const dbClient: DBClient;
export {};
