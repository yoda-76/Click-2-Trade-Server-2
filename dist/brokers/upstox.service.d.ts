import { OrderDetails } from 'Interface';
export declare class UpstoxBroker {
    private static authenticatedAccounts;
    private static instance;
    private instrumentData;
    private tokenToBeSubscribed;
    private instrumentDataSearchMap;
    private constructor();
    static getInstance(): UpstoxBroker;
    getInstrumentDataAsObject(): Record<string, any>;
    getInstrumentDataSearchMapAsObject(): Map<string, any>;
    handleWebhook(id: string, authcode: string): Promise<string>;
    isAuthenticated(accountId: string): boolean;
    placeOrder(accountId: string, orderDetails: OrderDetails): Promise<any>;
    cancelOrder(accountId: string, orderId: string): Promise<any>;
    getOrderDetailsByOrderId(accountId: string, orderId: string): Promise<{
        symbolName: any;
        type: any;
        side: any;
        qty: any;
        remQty: any;
        orderPrice: any;
        tradedPrice: any;
        triggerPrice: any;
        status: any;
        timeStamp: any;
        orderId: any;
        message: any;
    }>;
    getPositions(access_token: string): Promise<any>;
    getPositionByOrderDetails(accountId: string, orderDetails: OrderDetails): Promise<{
        netQty: any;
        symbolName: any;
        baseInstrument: any;
        instrumentType: any;
        expiry: any;
        strike: any;
        optionType: "CE" | "PE";
        ltpToken: any;
        exchange: string;
        action: any;
        pnl: any;
        ltp: any;
        avgPrice: any;
        sl: any;
        setSl: any;
        target: any;
        setTarget: any;
        buyPrice: any;
        sellPrice: any;
        buyQty: any;
        sellQty: any;
        realisedPnL: any;
        unrealisedPnL: any;
        product: any;
    }>;
    private loadInstrumentData;
    private structureInstrumentData;
    getInstrument(base: string, expiry: string, strike: number, side: string): any;
    getTokensToBeSubscribed(): number[];
    getFunds(access_token: string): Promise<any>;
    getTrades(access_token: string): Promise<any>;
}
